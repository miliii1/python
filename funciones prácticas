Ejercicios de LAMBDA, MAP, FILTER, SORTED

*** LAMBDA, LEN Y MAP ***
üß™ Ejercicio 1: Elevar al cuadrado
üìå Dada esta lista de n√∫meros, us√° map() y lambda para obtener una nueva lista con cada n√∫mero al cuadrado.
numeros = [1, 2, 3, 4, 5]
# üîß Tu c√≥digo ac√°
resultado = list(map(lambda x: x**2, numeros))

print(resultado)  # ‚û°Ô∏è [1, 4, 9, 16, 25]

üß™ Ejercicio 2: Obtener las longitudes de las palabras
üìå Dada esta lista de palabras, cre√° una lista con la cantidad de letras de cada palabra usando map() y lambda.
palabras = ["Python", "Backend", "Facultad", "Crack"]
# üîß Tu c√≥digo ac√°
longitudes = list(map(lambda x: len(x), palabras))
# FORMA M√ÅS PR√ÅCTICA
longitudes = list(map(len, palabras))
print(longitudes)  # ‚û°Ô∏è [6, 7, 8, 5]

*** FILTER ***
üîÅ Parte 1: Solo filter()
üìå filter() sirve para filtrar elementos de una lista seg√∫n una condici√≥n. Usa una funci√≥n que devuelve True o False.
# üî∞ Queremos quedarnos solo con los n√∫meros pares de esta lista:
numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
pares = list(filter(lambda x: x % 2 == 0, numeros))

print(pares) # ‚û°Ô∏è [2, 4, 6, 8, 10]


‚úÖ Ejercicio 2: Filtrar palabras largas
# üî∞ Filtrar las palabras que tienen m√°s de 6 letras:
palabras = ["Python", "Facultad", "UTN", "Ingenier√≠a", "Hola", "Comida"]
largas = list(filter(lambda x: len(x) > 6, palabras))

print(largas) # ‚û°Ô∏è ['Facultad', 'Ingenier√≠a']


üîÅ Parte 2: Combinar filter() + map()
üìå Esto es muy poderoso: filtr√°s con una condici√≥n y luego transform√°s el resultado.

‚úÖ Ejercicio 3: Filtrar impares y elevarlos al cuadrado
# üî∞ Quedarse con los impares y luego elevarlos al cuadrado:
numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9]
impares = list(filter(lambda x: x % 2 == 1, numeros))
cuadrados = list(map(lambda i: i** 2, impares))

print(cuadrados)  # ‚û°Ô∏è [1, 9, 25, 49, 81]

‚úÖ Ejercicio 4: De una lista de tuplas (nombre, edad), filtrar solo mayores de 25 y devolver sus nombres en may√∫sculas
personas = [("Mili", 22), ("Juan", 28), ("Ana", 25), ("Pedro", 30)]

age = list(filter(lambda x: x[1] > 25, personas))
nombres_mayus = list(map(lambda i: i[0].upper(), age))

print(nombres_mayus)  # ‚û°Ô∏è ['JUAN', 'PEDRO']


*** SORTED ***
üß™ Ejercicio 1: Ordenar palabras por longitud
üìå Dada una lista de palabras, ordenalas por su cantidad de letras.
palabras = ["Hola", "Facultad", "Python", "UTN"]

ordenados = sorted(palabras, key=lambda x: len(x))

print(ordenados) # ‚û°Ô∏è ['UTN', 'Hola', 'Python', 'Facultad']

üß™ Ejercicio 2: Ordenar lista de tuplas por edad
üìå Dada esta lista de personas, ordenalas por edad de menor a mayor.
personas = [("Mili", 22), ("Juan", 28), ("Ana", 25), ("Pedro", 30)]

ordenar_edad = sorted(personas, key=lambda x: x[1])

print(ordenar_edad) # ‚û°Ô∏è [('Mili', 22), ('Ana', 25), ('Juan', 28), ('Pedro', 30)]

üß™ Ejercicio 3: Ordenar nombres por la √∫ltima letra
üìå Dada una lista de nombres, ordenalos por la √∫ltima letra de cada uno.
nombres = ["Luc√≠a", "Pedro", "Ana", "Juli", "Roberto"]

ordenar_name = sorted(nombres, key=lambda x: x[-1]) #si lo quiesiera al rev√©s de la Z - A => reverse=True #‚û°Ô∏è ['Pedro', 'Roberto', 'Juli', 'Luc√≠a', 'Ana']

print(ordenar_name) # ‚û°Ô∏è ['Ana', 'Luc√≠a', 'Pedro', 'Juli', 'Roberto']  (seg√∫n orden alfab√©tico de la √∫ltima letra)







