üî∞ Ejercicio 1: N√∫meros pares al cuadrado
üìå Crear una lista con los cuadrados de los n√∫meros pares entre 1 y 20.
cuadrados = [i**2 for i in range(1, 21) if i % 2 == 0] (corregido)‚úÖ
print(cuadrados)

üî∞ Ejercicio 2: Longitud de palabras
üìå Dada una lista de palabras, crear un diccionario que tenga como clave la palabra y como valor su longitud.
palabras = ["python", "facultad", "back"]
longitud = for palabras in lista count

corregido:
palabras = ["python", "facultad", "back"]
longitud = {palabra: len(palabra) for palabra in palabras}
print(longitud)


üòà Bonus Crack
Convert√≠ esta l√≥gica a comprensi√≥n de diccionarios:
""" palabras = ["python", "facultad", "back"]
longitudes = {palabra: len(palabra) for palabra in palabras}
"""
def contar_palabras(lista):
    count = {}
    for palabras in lista:
        count[palabras] = len(palabras)
        
    return count

print(contar_palabras(["python", "facultad", "back"]))

üöÄ Parte 1: Comprensi√≥n intermedia (listas + diccionarios)
üß† Ejercicio 1: Filtrar y elevar al cubo
üìå Crea una lista por comprensi√≥n con los cubos de los n√∫meros entre 1 y 30 que sean m√∫ltiplos de 3 pero no de 5.
alcubo = [i**3 for i in range(1, 31) if i % 3 == 0 and i % 5 != 0]
print(alcubo)

üß† Ejercicio 2: Crear diccionario de edades por comprensi√≥n
üìå Dada esta lista de personas, gener√° un diccionario que tenga como clave el nombre y como valor la edad.

person = [("Mili", 22), ("Juan", 25), ("Lu", 30), ("Pedro", 25)]
print(dict(person))

_Por compresi√≥n_
edades = {name: age for name, age in person}
print(edades)

üî∞ 1. Sumar elementos en la lista
Escribe un programa en Python para sumar todos los elementos de una lista.

def list_sum(lista):
  return sum(lista)
  
print(list_sum([1, 2, 3, 4, 5])) # --> 15

üî∞ 2. Eliminar elementos espec√≠ficos de la lista

Escriba un programa en Python para imprimir una lista espec√≠fica despu√©s de eliminar los elementos 0, 4 y 5.
Lista de ejemplo: ['Rojo', 'Verde', 'Blanco', 'Negro', 'Rosa', 'Amarillo']
Salida esperada: ['Verde', 'Blanco', 'Negro']

def remove_ob(lista):
  del lista[0], lista[3:5]
  return lista
  
print(remove_ob(['Rojo', 'Verde', 'Blanco', 'Negro', 'Rosa', 'Amarillo'])) # --> ['Verde', 'Blanco', 'Negro']

3. Convertir lista en cadena

Escribe un programa en Python para convertir una lista de caracteres en una cadena.

def carather(lista):
  return "".join(lista)
  
print(carather(["P", "Y", "T", "H", "O", "N"]))

4. Ordenar tuplas por √∫ltimo elemento

Escriba un programa en Python para obtener una lista, ordenada de forma creciente por el √∫ltimo elemento de cada tupla, de una lista dada de tuplas no vac√≠as.
Lista de ejemplo: [(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]
Resultado esperado: [(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]

def order_tupla(tupla):
  return sorted(tupla, key=lambda x: x[-1])
print(order_tupla([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])) # [(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]

5. Contar cu√°ntas veces aparece una letra en una cadena.

def count_letters(str, x):
  let = str.lower()
  return let.count(x)
  
print(count_letters("aaBcdD", "b"))

6. Imprimir los primeros n m√∫ltiplos de 5 entre 1500 y 2700.

for i in range(1500, 2700):
    if i % 7 == 0 or i % 5 == 0:
      print(i)

7. Comprobar si un n√∫mero dado est√° entre 1 y 100 (inclusive).
def num(n):
  return 1 <= n <= 100
  
print(num(101)) # False
print(num(5)) # True























