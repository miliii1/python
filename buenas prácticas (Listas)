ğŸ”° Ejercicio 1: NÃºmeros pares al cuadrado
ğŸ“Œ Crear una lista con los cuadrados de los nÃºmeros pares entre 1 y 20.
cuadrados = [i**2 for i in range(1, 21) if i % 2 == 0] (corregido)âœ…
print(cuadrados)

ğŸ”° Ejercicio 2: Longitud de palabras
ğŸ“Œ Dada una lista de palabras, crear un diccionario que tenga como clave la palabra y como valor su longitud.
palabras = ["python", "facultad", "back"]
longitud = for palabras in lista count

corregido:
palabras = ["python", "facultad", "back"]
longitud = {palabra: len(palabra) for palabra in palabras}
print(longitud)


ğŸ˜ˆ Bonus Crack
ConvertÃ­ esta lÃ³gica a comprensiÃ³n de diccionarios:
""" palabras = ["python", "facultad", "back"]
longitudes = {palabra: len(palabra) for palabra in palabras}
"""
def contar_palabras(lista):
    count = {}
    for palabras in lista:
        count[palabras] = len(palabras)
        
    return count

print(contar_palabras(["python", "facultad", "back"]))

ğŸš€ Parte 1: ComprensiÃ³n intermedia (listas + diccionarios)
ğŸ§  Ejercicio 1: Filtrar y elevar al cubo
ğŸ“Œ Crea una lista por comprensiÃ³n con los cubos de los nÃºmeros entre 1 y 30 que sean mÃºltiplos de 3 pero no de 5.
alcubo = [i**3 for i in range(1, 31) if i % 3 == 0 and i % 5 != 0]
print(alcubo)

ğŸ§  Ejercicio 2: Crear diccionario de edades por comprensiÃ³n
ğŸ“Œ Dada esta lista de personas, generÃ¡ un diccionario que tenga como clave el nombre y como valor la edad.

person = [("Mili", 22), ("Juan", 25), ("Lu", 30), ("Pedro", 25)]
print(dict(person))

_Por compresiÃ³n_
edades = {name: age for name, age in person}
print(edades)



